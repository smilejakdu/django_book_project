
# created by https://www.gitignore.io/api/linux,macos,django,python
# edit at https://www.gitignore.io/?templates=linux,macos,django,python
### docker ###
dockerfile

### django ###
.idea/
my_settings.py
*.log
*.pot
*.pyc
__pycache__/
local_settings.py
db.sqlite3
db.sqlite3-journal
media
# if your build process includes running collectstatic, then you probably don't need or want to include staticfiles/
# in your git repository. update and uncomment the following line accordingly.
# <django-project-name>/staticfiles/
### django.python stack ###
# byte-compiled / optimized / dll files
*.py[cod]
*$py.class
# c extensions
*.so
# distribution / packaging
.python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
manifest
# pyinstaller
#  usually these files are written by a python script from a template
#  before pyinstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec
# installer logs
pip-log.txt
pip-delete-this-directory.txt
# unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/
# translations
*.mo
# scrapy stuff:
.scrapy
# sphinx documentation
docs/_build/
# pybuilder
target/
# pyenv
.python-version
# pipenv
#   according to pypa/pipenv#598, it is recommended to include pipfile.lock in version control.
#   however, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#pipfile.lock
# celery beat schedule file
celerybeat-schedule
# sagemath parsed files
*.sage.py
# spyder project settings
.spyderproject
.spyproject
# rope project settings
.ropeproject
# mr developer
.mr.developer.cfg
.project
.pydevproject
# mkdocs documentation
/site
# mypy
.mypy_cache/
.dmypy.json
dmypy.json
# pyre type checker
.pyre/
### linux ###
*~
# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*
# kde directory preferences
.directory
# linux trash folder which might appear on any partition or disk
.trash-*
# .nfs files are created when an open file is removed but is still being accessed
.nfs*
### macos ###
# general
.ds_store
.appledouble
.lsoverride
# icon must end with two \r
icon
# thumbnails
._*
# files that might appear in the root of a volume
.documentrevisions-v100
.fseventsd
.spotlight-v100
.temporaryitems
.trashes
.volumeicon.icns
.com.apple.timemachine.donotpresent
# directories potentially created on remote afp share
.appledb
.appledesktop
network trash folder
temporary items
.apdisk
### python ###
# byte-compiled / optimized / dll files
# c extensions
# distribution / packaging
# pyinstaller
#  usually these files are written by a python script from a template
#  before pyinstaller builds the exe, so as to inject date/other infos into it.
# installer logs
# unit test / coverage reports
# translations
# scrapy stuff:
# sphinx documentation
# pybuilder
# pyenv
# pipenv
#   according to pypa/pipenv#598, it is recommended to include pipfile.lock in version control.
#   however, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
# celery beat schedule file
# sagemath parsed files
# spyder project settings
# rope project settings
# mr developer
# mkdocs documentation
# mypy
# pyre type checker
# end of https://www.gitignore.io/api/linux,macos,django,python
